exp 1
#include <stdio.h>
#include <ctype.h>
#include <string.h>
 
int main(void) {
    char user[20];
    printf("Enter your username: \n");
    fgets(user, sizeof(user), stdin);
    user[strcspn(user, "\n")] = '\0'; // Remove newline character if present
 
    char pass[11];
    printf("Enter your password: ");
    int i = 0;
    while (i < sizeof(pass) - 1) {
        char ch = getchar();
        if (ch == '\n') break; // Stop if newline is encountered
        pass[i] = ch;
        i++;
        printf("*");
    }
    pass[i] = '\0'; // Ensure string is null-terminated
 
    printf("\n");
 
    int lower_count = 0, upper_count = 0, digit_count = 0, punct_count = 0;
    size_t pass_len = strlen(pass);
    for (size_t i = 0; i < pass_len; i++) {
        if (islower(pass[i])) lower_count++;
        if (isupper(pass[i])) upper_count++;
        if (isdigit(pass[i])) digit_count++;
        if (ispunct(pass[i])) punct_count++;
    }
 
    printf("Password strength analysis:\n");
 
    if (pass_len <= 8 && pass_len >= 8) {
        printf("The password must have at least 8 characters\n");
        return 1;
    }
    if (lower_count == 0) printf("You need a lowercase letter\n");
    if (upper_count == 0) printf("You need an uppercase letter\n");
    if (digit_count == 0) printf("You need digits\n");
    if (punct_count == 0) printf("You need a special character\n");
    if (lower_count != 0 && upper_count != 0 && digit_count != 0 && punct_count != 0)
        printf("Your password is 100 percent strong!\n");
    else if (upper_count != 0 && punct_count != 0 && digit_count != 0 && pass_len >= 8)
        printf("Your password is correct 80 percent strong!\n");
    else if (lower_count != 0 && digit_count != 0 && punct_count != 0 && pass_len >= 6)
        printf("Your password is 60 percent strong\n");
    else if (lower_count != 0 && upper_count != 0 && pass_len >= 4)
        printf("Your password is 40 percent strong\n");
    else if (lower_count != 0 && pass_len >= 4)
        printf("Your password is 20 percent strong\n");
    else
        printf("Your password is incorrect!\n");
 
    return 0;
}
 
Exp 2
#include <iostream>
#include <cstring> // Needed for strlen()
 
using namespace std;
 
int main() {
    char str[100];
    int choice;
 
    do {
        cout << "\nPlease enter a string:\t";
        cin.getline(str, sizeof(str)); // Safe way to read strings
 
        cout << "\nPlease choose following options:\n";
        cout << "1 = Encrypt the string.\n";
        cout << "2 = Decrypt the string.\n";
        cin >> choice;
 
        switch(choice) {
            case 1:
                for(int i = 0; i < strlen(str); i++) {
                    str[i] = str[i] + 3; // The key for encryption is 3 added to ASCII value
                }
                cout << "\nEncrypted string: " << str << endl;
                break;
            case 2:
                for(int i = 0; i < strlen(str); i++) {
                    str[i] = str[i] - 3; // The key for decryption is 3 subtracted from ASCII value
                }
                cout << "\nDecrypted string: " << str << endl;
                break;
            default:
                cout << "\nInvalid choice\n";
        }
 
        cout << "\nDo you want to continue? (1 for yes, 0 for no): ";
        cin >> choice;
        cin.ignore(); // Ignore the newline character left in the buffer
 
    } while (choice == 1);
 
    cout << "\nProgram exited.\n";
    return 0;
}
 
Exp 3
#include <iostream>
using namespace std;
 
// Function to encrypt the text with the given shift
string encrypt(string text, int s) {
    string result = "";
    // Traverse the text
    for (int i = 0; i < text.length(); i++) {
        // Apply transformation to each character
        // Encrypt Uppercase letters
        if (isupper(text[i]))
            result += char(int(text[i] + s - 65) % 26 + 65);
        // Encrypt Lowercase letters
        else
            result += char(int(text[i] + s - 97) % 26 + 97);
    }
    // Return the resulting string
    return result;
}
 
// Function to decrypt the text with the given shift
string decrypt(string text, int s) {
    string result = "";
    // Traverse the text
    for (int i = 0; i < text.length(); i++) {
        // Apply transformation to each character
        // Decrypt Uppercase letters
        if (isupper(text[i]))
            result += char((int(text[i] - s - 65) + 26) % 26 + 65);
        // Decrypt Lowercase letters
        else
            result += char((int(text[i] - s - 97) + 26) % 26 + 97);
    }
    // Return the resulting string
    return result;
}
 
int main() {
    string text;
    int s;
 
    // Get user input for text and shift value
    cout << "Enter the text: ";
    getline(cin, text);
    cout << "Enter the shift value: ";
    cin >> s;
 
    // Encrypt the text
    string encrypted_text = encrypt(text, s);
    cout << "\nEncrypted text: " << encrypted_text;
 
    // Decrypt the encrypted text
    string decrypted_text = decrypt(encrypted_text, s);
    cout << "\nDecrypted text: " << decrypted_text;
 
    return 0;
}
Exp 5 code 1
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import java.util.Scanner;
 
public class DES {
    public static void main(String[] args) {
        try {
            System.out.println("Message Encryption Using DES Algorithm\n-------");
 
            // Create a Scanner object for user input
            Scanner scanner = new Scanner(System.in);
 
            // Get input from the user
            System.out.print("Enter the message: ");
            String userInput = scanner.nextLine();
 
            KeyGenerator keygenerator = KeyGenerator.getInstance("DES");
            SecretKey myDesKey = keygenerator.generateKey();
            Cipher desCipher;
            desCipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
            desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);
            byte[] text = userInput.getBytes();
            System.out.println("Message [Byte Format] : " + text);
            System.out.println("Message : " + new String(text));
            byte[] textEncrypted = desCipher.doFinal(text);
            System.out.println("Encrypted Message: " + new String(textEncrypted));
            desCipher.init(Cipher.DECRYPT_MODE, myDesKey);
            byte[] textDecrypted = desCipher.doFinal(textEncrypted);
            System.out.println("Decrypted Message: " + new String(textDecrypted));
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        }
    }
}
 
Exp 5 code 2
import java.math.BigInteger;
import java.util.Scanner;
 
public class RSA {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
         
        int p, q, n, z, d = 0, e, i;
        int msg;
        double c;
        BigInteger msgback;
 
        System.out.print("Enter the first prime number (p): ");
        p = scanner.nextInt();
 
        System.out.print("Enter the second prime number (q): ");
        q = scanner.nextInt();
 
        n = p * q;
        z = (p - 1) * (q - 1);
 
        System.out.println("The value of z = " + z);
 
        for (e = 2; e < z; e++) {
            if (gcd(e, z) == 1) {
                break;
            }
        }
 
        System.out.println("The value of e = " + e);
 
        for (i = 0; i <= 9; i++) {
            int x = 1 + (i * z);
            if (x % e == 0) {
                d = x / e;
                break;
            }
        }
 
        System.out.println("The value of d = " + d);
 
        System.out.print("Enter the number to be encrypted and decrypted: ");
        msg = scanner.nextInt();
 
        c = Math.pow(msg, e) % n;
        System.out.println("Encrypted message is : " + c);
 
        BigInteger N = BigInteger.valueOf(n);
        BigInteger C = BigInteger.valueOf((long) c);
        msgback = C.pow(d).mod(N);
 
        System.out.println("Decrypted message is : " + msgback);
 
        scanner.close();
    }
 
    static int gcd(int e, int z) {
        if (e == 0)
            return z;
        else
            return gcd(z % e, e);
    }
}
 
Exp 6
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import java.util.Scanner;
 
public class DES {
    public static void main(String[] args) {
        try {
            System.out.println("Message Encryption Using DES Algorithm\n-------");
 
            // Get input message from the user
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter the message to be encrypted: ");
            String message = scanner.nextLine();
 
            // Generate DES key
            KeyGenerator keygenerator = KeyGenerator.getInstance("DES");
            SecretKey myDesKey = keygenerator.generateKey();
 
            // Initialize DES cipher
            Cipher desCipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
            desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);
 
            // Encrypt message
            byte[] textEncrypted = desCipher.doFinal(message.getBytes());
 
            System.out.println("Encrypted Message: " + new String(textEncrypted));
 
            // Decrypt message
            desCipher.init(Cipher.DECRYPT_MODE, myDesKey);
            byte[] textDecrypted = desCipher.doFinal(textEncrypted);
 
            System.out.println("Decrypted Message: " + new String(textDecrypted));
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException
                | IllegalBlockSizeException | BadPaddingException e) {
            e.printStackTrace();
        }
    }
}
 
Exp 7
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import java.util.Base64;
import java.util.Scanner;
 
public class AESExample {
    public static void main(String[] args) {
        try {
            System.out.println("Message Encryption Using AES Algorithm\n-------");
 
            // Generate AES key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(128); // Using 128 bit AES
            SecretKey secretKey = keyGen.generateKey();
 
            // Generate Initialization Vector (IV)
            byte[] iv = new byte[16];
            // You should NEVER use the same IV for multiple encryptions due to security vulnerabilities.
            // For demonstration purposes, we use a fixed IV here.
            IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);
 
            // Get message from user
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter the message to be encrypted: ");
            String originalMessage = scanner.nextLine();
 
            // Encrypt the message
            byte[] encryptedMessage = encrypt(originalMessage, secretKey, ivParameterSpec);
 
            // Decrypt the message
            String decryptedMessage = decrypt(encryptedMessage, secretKey, ivParameterSpec);
 
            System.out.println("Original Message: " + originalMessage);
            System.out.println("Encrypted Message: " +
Base64.getEncoder().encodeToString(encryptedMessage));
            System.out.println("Decrypted Message: " + decryptedMessage);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 
    public static byte[] encrypt(String message, SecretKey secretKey, IvParameterSpec
ivParameterSpec) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivParameterSpec);
        return cipher.doFinal(message.getBytes());
    }
 
    public static String decrypt(byte[] encryptedMessage, SecretKey secretKey, IvParameterSpec
ivParameterSpec) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(Cipher.DECRYPT_MODE, secretKey, ivParameterSpec);
        byte[] decryptedBytes = cipher.doFinal(encryptedMessage);
        return new String(decryptedBytes);
    }
}
 
Exp 8
import hashlib
 
def get_md5(input_str):
    try:
        # Create an MD5 hash object
        md5_hash = hashlib.md5()
        # Update the hash object with the input string
        md5_hash.update(input_str.encode())
        # Get the hexadecimal representation of the hash
        hash_text = md5_hash.hexdigest()
        return hash_text
    except Exception as e:
        raise e
 
if __name__ == "__main__":
    try:
        input_str = input("Enter the string to generate MD5 hash: ")
        print("Your HashCode Generated by MD5 is:", get_md5(input_str))
    except Exception as e:
        print("Error:", e) 